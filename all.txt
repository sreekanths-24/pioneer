LEXICAL ANALYZER USING C
------------------------
#include <stdio.h>
#include <ctype.h>
#include <string.h>

int isKeyword(char buffer[])
{
    char keywords[32][10] = {"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern", "float", "for", "goto", "if", "int", "long", "register", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"};
    int i, flag = 0;
    for (i = 0; i < 32; ++i)
    {
        if (strcmp(keywords[i], buffer) == 0)
        {
            flag = 1;
            break;
        }
    }
    return flag;
}

int main()
{
    FILE *fp;
    char ch, buffer[15];
    
    fp = fopen("program.txt", "r");
    if (fp == NULL)
    {
        printf("\nError while opening the file\n");
        return 1;
    }

    printf("\n");
    while ((ch = fgetc(fp)) != EOF)
    {
        if (isspace(ch))
        {
            continue;
        }

        if (isalnum(ch) || ch == '_')
        {
            buffer[0] = ch;
            int i = 1;

            while ((ch = fgetc(fp)) != EOF && (isalnum(ch) || ch == '_') && i < 14)
            {
                buffer[i++] = ch;
            }

            buffer[i] = '\0';

            if (isKeyword(buffer))
            {
                printf("%s is keyword\n", buffer);
            }
            else
            {
                printf("%s is identifier\n", buffer);
            }
        }
        else
        {
            printf("%c is special character\n", ch);
        }
    }

    fclose(fp);
    return 0;
}




CALCULATOR USING LEX
--------------------
%{
#include <stdio.h>
#include <stdlib.h>

int op = 0, i;
float a, b;

void digi();

%}

dig [0-9]+|([0-9]*)\.([0-9]+)
add "+"
sub "-"
mul "*"
div "/"
pow "^"
ln \n

%%

{dig} { digi(); }
{add} { op = 1; }
{sub} { op = 2; }
{mul} { op = 3; }
{div} { op = 4; }
{pow} { op = 5; }
{ln} { printf("\nThe Answer: %f\n\n", a); exit(0); }

%%

void digi()
{
    if (op == 0)
        a = atof(yytext);
    else
    {
        b = atof(yytext);
        switch (op)
        {
        case 1: a = a + b; break;
        case 2: a = a - b; break;
        case 3: a = a * b; break;
        case 4:
            if (b != 0)
                a = a / b;
            else
            {
                printf("Error: Division by zero\n");
                exit(1);
            }
            break;
        case 5:
            float result = 1.0;
            for (i = 0; i < b; ++i)
                result *= a;
            a = result;
            break;
        }
        op = 0;
    }
}

int main()
{
    printf("Enter a number with the operation you prefer (e.g., 5+3, 8*2, etc.):\n");
    yylex();
    return 0;
}

int yywrap()
{
    return 1;
}




COUNTING VOWELS AND CONSONANTS
------------------------------
%{
#include <stdio.h>
int v = 0, c = 0;
%}

%%
[aeiouAEIOU] { v++; }
[a-zA-Z]    { c++; }
[\n]        { printf("Number of vowels: %d, Number of consonants: %d\n", v, c); return 0; }
.           { /* Ignore any other characters */ }

%%

int main()
{
    printf("Enter the input:\n");
    yylex();
    return 0;
}

int yywrap()
{
    return 1;
}




COUNTING WORDS, SPACES, LINES, ETC.
-----------------------------------
%{
#include<stdio.h>
int sc=0,wc=0,lc=0,cc=0;
%}
%%
[\n] { lc++; cc+=yyleng;}
[ \t] { sc++; cc+=yyleng;}
[^\t\n ]+ { wc++; cc+=yyleng;}
%%
int main(int argc ,char* argv[ ])
{
 printf("Enter the input:\n");
 yylex();
 printf("The number of lines=%d\n",lc);
 printf("The number of spaces=%d\n",sc);
 printf("The number of words=%d\n",wc);
 printf("The number of characters are=%d\n",cc);
 return 0;
}
int yywrap( )
{
 return 1;
}
//press ctrl+D for output




INTERMEDIATE CODE GENERATOR
---------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_EXPRESSION_LENGTH 100
#define MAX_OPERATORS 15

int i = 1, j = 0, no = 0, tmpch = 'Z';
char str[MAX_EXPRESSION_LENGTH], left[MAX_EXPRESSION_LENGTH], right[MAX_EXPRESSION_LENGTH];

struct exp
{
    int pos;
    char op;
} k[MAX_OPERATORS];

void findopr();
void explore();
void fleft(int);
void fright(int);

int main()
{
    printf("\t\tINTERMEDIATE CODE GENERATION\n\n");
    printf("Enter the Expression : ");
    
    fgets(str, MAX_EXPRESSION_LENGTH, stdin);
    str[strcspn(str, "\n")] = '\0';
    
    printf("The intermediate code:\n");
    findopr();
    explore();

    return 0;
}

void findopr()
{
    for (i = 0; str[i] != '\0'; i++)
        if (str[i] == ':')
        {
            k[j].pos = i;
            k[j++].op = ':';
        }
        else if (str[i] == '=')
        {
            k[j].pos = i;
            k[j++].op = '=';
        }

    for (i = 0; str[i] != '\0'; i++)
        if (str[i] == '/')
        {
            k[j].pos = i;
            k[j++].op = '/';
        }

    for (i = 0; str[i] != '\0'; i++)
        if (str[i] == '*')
        {
            k[j].pos = i;
            k[j++].op = '*';
        }

    for (i = 0; str[i] != '\0'; i++)
        if (str[i] == '+')
        {
            k[j].pos = i;
            k[j++].op = '+';
        }

    for (i = 0; str[i] != '\0'; i++)
        if (str[i] == '-')
        {
            k[j].pos = i;
            k[j++].op = '-';
        }
}

void explore()
{
    i = 1;
    while (k[i].op != '\0' && i < MAX_OPERATORS)
    {
        fleft(k[i].pos);
        fright(k[i].pos);
        str[k[i].pos] = tmpch--;

        printf("\t%c := %s%c%s\t\t", str[k[i].pos], left, k[i].op, right);
        printf("\n");
        i++;
    }
    fright(-1);

    if (no == 0)
    {
        fleft(strlen(str));
        printf("\t%s := %s", right, left);
        printf("\n");
        exit(0);
    }
    printf("\t%s := %c", right, str[k[--i].pos]);
    printf("\n");
}

void fleft(int x)
{
    int w = 0, flag = 0;
    x--;

    while (x != -1 && str[x] != '+' && str[x] != '*' && str[x] != '=' && str[x] != '\0' && str[x] != '-' && str[x] != '/')
    {
        if (str[x] != '$' && flag == 0)
        {
            left[w++] = str[x];
            left[w] = '\0';
            str[x] = '$';
            flag = 1;
        }
        x--;
    }
}

void fright(int x)
{
    int w = 0, flag = 0;
    x++;
    while (x != -1 && str[x] != '+' && str[x] != '*' && str[x] != '\0' && str[x] != '=' && str[x] != '-' && str[x] != '/')
    {
        if (str[x] != '$' && flag == 0)
        {
            right[w++] = str[x];
            right[w] = '\0';
            str[x] = '$';
            flag = 1;
        }
        x++;
    }
}




NFA TO DFA
----------
#include <stdio.h>
#include <string.h>

const char* sortcheck(char a[], int n) {
    return a;
}

int main() {
    int no_states, no_symbols, no_final, initial, final_states[50], i, j, k, l, m, h, z, found, selected_state = 0, temp = 0, str_len;
    char trans_table[50][50][50], dfa_table[50][50][50], tempz[20], tempx[20];

    printf("\n\t--- NFA TO DFA CONVERTOR ---\n");
    printf("\nEnter the total number of states: ");
    scanf("%d", &no_states);

    printf("\nEnter the total number of input symbols: ");
    scanf("%d", &no_symbols);

    printf("\nEnter the transition table below\n");

    for (i = 0; i <= no_states; i++) {
        if (i != 0) {
            sprintf(trans_table[i][0], "%d", i);
            printf("\n ---> State %d\n", i);
        }

        for (j = 1; j <= no_symbols; j++) {
            if (i == 0) {
                trans_table[0][j][0] = (char)96 + j;
                continue;
            }
            printf("input %c: ", (char)96 + j);
            scanf("%s", trans_table[i][j]);
        }
    }

    printf("\nEnter the initial state number: ");
    scanf("%d", &initial);

    printf("\nEnter the number of final state: ");
    scanf("%d", &no_final);

    printf("\nEnter the final states below\n");
    for (i = 0; i < no_final; i++) {
        scanf("%d", &final_states[i]);
    }

    printf("\n-- INPUT --\n\n");
    for (i = 0; i <= no_states; i++) {
        printf("\n");
        for (j = 0; j <= no_symbols; j++) {
            printf("%s\t\t", trans_table[i][j]);
        }
    }

    for (i = 0; i <= no_states; i++) {
        if (i == 0) {
            for (j = 1; j <= no_symbols; j++) {
                dfa_table[0][j][0] = (char)(96 + j);
            }
        }

        if (i == initial) {
            for (j = 0; j <= no_symbols; j++) {
                strcpy(dfa_table[i][j], trans_table[i][j]);
            }
        }
    }

    i = 1;
    z = 2;
    while (i != z) {
        for (j = 1; j <= no_symbols; j++) {
            if (strcmp(dfa_table[i][j], "-") == 0) {
                continue;
            }

            found = 0;
            for (k = 1; k < z; k++) {
                tempz[0] = '\0';
                tempx[0] = '\0';
                strcpy(tempz, dfa_table[i][j]);
                strcpy(tempx, dfa_table[k][0]);
                if (strcmp(sortcheck(tempz, strlen(tempz)), sortcheck(tempx, strlen(tempx))) == 0) {
                    found = 1;
                    break;
                }
            }

            if (found != 1) {
                strcpy(dfa_table[z][0], dfa_table[i][j]);
                for (k = 0; k <= strlen(dfa_table[z][0]); k++) {
                    tempz[0] = dfa_table[z][0][k];
                    sscanf(tempz, "%d", &temp);

                    if (dfa_table[z][0][k] != ',' && dfa_table[z][0][k] != '\0') {
                        selected_state = (selected_state * 10) + temp;
                    } else {
                        for (l = 1; l <= no_states; l++) {
                            if (strcmp(trans_table[selected_state][l], "-") != 0) {
                                strcat(dfa_table[z][l], trans_table[selected_state][l]);
                                strcat(dfa_table[z][l], ",");
                            }
                        }
                        selected_state = 0;
                    }
                }

                for (k = 1; k <= no_symbols; k++) {
                    str_len = (strlen(dfa_table[z][k]) - 1);
                    if (dfa_table[z][k][0] == '\0') {
                        dfa_table[z][k][0] = '-';
                    }

                    if (dfa_table[z][k][str_len] == ',') {
                        dfa_table[z][k][str_len] = '\0';
                    }

                    for (l = 0; l < strlen(dfa_table[z][k]); l++) {
                        if (dfa_table[z][k][l] == ',')
                            continue;

                        for (m = l + 1; dfa_table[z][k][m] != '\0'; m++) {
                            if (dfa_table[z][k][l] == dfa_table[z][k][m]) {
                                for (h = m - 1; dfa_table[z][k][h] != '\0'; h++) {
                                    dfa_table[z][k][h] = dfa_table[z][k][h + 2];
                                }
                            }
                        }
                    }
                }
                z++;
            }
        }
        i++;
    }

    printf("\n\n\n");
    printf("\n-- OUTPUT --\n\n");

    for (i = 0; i < z; i++) {
        printf("\n");
        for (j = 0; j <= no_symbols; j++) {
            temp = 0;
            if (j == 0) {
                for (k = 0; k < no_final; k++) {
                    tempz[0] = '\0';
                    sprintf(tempz, "%d", final_states[k]);
                    if (strstr(dfa_table[i][j], tempz)) {
                        printf("*%s\t\t", dfa_table[i][j]);
                        temp = 1;
                        break;
                    }
                }
            }
            if (temp == 1)
                continue;

            printf("%s\t\t", dfa_table[i][j]);
        }
    }

    printf("\n");

    return 0;
}




CONSTANT PROPOGATION
--------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_RESULT_LENGTH 5

struct expr {
    char op[2], op1[5], op2[5], res[5];
    int flag;
};

struct expr arr[10];
int n;

void input();
void constant();
void output();
void change(int p, char *res);

int main() {
    input();
    constant();
    output();
    return 0;
}

void input() {
    int i;
    printf("\nEnter the maximum number of expressions: ");
    scanf("%d", &n);
    printf("\nEnter the input:\n");
    for (i = 0; i < n; i++) {
        scanf("%s %s %s %s", arr[i].op, arr[i].op1, arr[i].op2, arr[i].res);
        arr[i].flag = 0;
    }
}

void constant() {
    int i;
    int op1, op2, res;
    char op;
    char res1[MAX_RESULT_LENGTH];
    for (i = 0; i < n; i++) {
        if (isdigit(arr[i].op1[0]) && isdigit(arr[i].op2[0]) || strcmp(arr[i].op, "=") == 0) {
            op1 = atoi(arr[i].op1);
            op2 = atoi(arr[i].op2);
            op = arr[i].op[0];
            switch (op) {
                case '+':
                    res = op1 + op2;
                    break;
                case '-':
                    res = op1 - op2;
                    break;
                case '*':
                    res = op1 * op2;
                    break;
                case '/':
                    res = op1 / op2;
                    break;
                case '=':
                    res = op1;
                    break;
            }
            snprintf(res1, MAX_RESULT_LENGTH, "%d", res);
            arr[i].flag = 1;
            change(i, res1);
        }
    }
}

void output() {
    int i;
    printf("\nOptimized code is:\n");
    for (i = 0; i < n; i++) {
        if (!arr[i].flag) {
            printf("%s %s %s %s\n", arr[i].op, arr[i].op1, arr[i].op2, arr[i].res);
        }
    }
}

void change(int p, char *res) {
    int i;
    for (i = p + 1; i < n; i++) {
        if (strcmp(arr[p].res, arr[i].op1) == 0) {
            strcpy(arr[i].op1, res);
        } else if (strcmp(arr[p].res, arr[i].op2) == 0) {
            strcpy(arr[i].op2, res);
        }
    }
}




YACC TO RECOGNIZE ARITHMETIC EXPRESSION
---------------------------------------
YACC
----
%{
#include <stdio.h>
int yylex();
void yyerror(char *);
%}

%token NUMBER
%token VARIABLE

%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%%

S: VARIABLE '=' E {
    printf("\nEntered arithmetic expression is Valid\n\n");
    return 0;
}
E: E '+' E
 | E '-' E
 | E '*' E
 | E '/' E
 | E '%' E
 | '(' E ')'
 | NUMBER
 | VARIABLE
;

%%

int main()
{
    printf("\nEnter Any Arithmetic Expression which can have operations Addition, Subtraction, Multiplication, Division, Modulus and Round brackets:\n");
    yyparse();
    return 0;
}

void yyerror(char *s)
{
    printf("\nEntered arithmetic expression is Invalid\n\n");
}




LEX
---
%{
#include<stdio.h>
#include "y.tab.h"
%}

%%
[a-zA-Z]+   { return VARIABLE; }
[0-9]+      { return NUMBER; }
[\t]        ;  // Ignore tabs
[\n]        { return 0; }
.           { return yytext[0]; }
%%

int yywrap() {
    return 1;
}




YACC TO FIND PALINDROME OR NOT
------------------------------
YACC
----
%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
extern int yylex();
void yyerror(const char *msg);
%}

%union {
    char* f;
}

%token <f> STR
%type <f> E

%%

S : E {
        int flag = 0;
        int k = strlen($1) - 1;
        for (int i = 0; i <= k / 2; i++) {
            if ($1[i] != $1[k - i]) {
                flag = 1;
                break;
            }
        }

        if (flag == 1) {
            printf("Not palindrome\n");
        } else {
            printf("Palindrome\n");
        }
    }
    ;

E : STR {
        $$ = $1;
    }
    ;

%%

void yyerror(const char *msg)
{
    fprintf(stderr, "%s\n", msg);
    exit(1);
}

int main()
{
    yyparse();
    return 0;
}




LEX
---
%{
#include "y.tab.h"

void yyerror(const char *s);
%}

%%
[a-zA-Z]+   { yylval.f = yytext; return STR; }
[-+()*/]    { return yytext[0]; }
[ \t\n]     { }
.           { yyerror("Invalid character"); }
%%

int yywrap()
{
    return -1;
}




BACKEND OF COMPILER
-------------------
#include <stdio.h>
#include <string.h>

void main()
{
    char icode[10][30], str[20], destReg, op, operand1, operand2;
    int i = 0;

    printf("\nEnter the set of intermediate code (terminated by exit): \n");

    do
    {
        scanf("%s", icode[i]);
        i++;
    } while (strcmp(icode[i - 1], "exit") != 0 && i < 10);

    printf("\n\nTarget code generation: ");

    for (int j = 0; j < i - 1; j++)
    {
        sscanf(icode[j], "%c=%c%c%c", &destReg, &operand1, &op, &operand2);

        printf("\n\tMOV R0, %c", operand1);
        printf("\n\tMOV R1, %c", operand2);

        switch (op)
        {
        case '+':
            printf("\n\tADD R0, R1");
            break;
        case '-':
            printf("\n\tSUB R0, R1");
            break;
        case '*':
            printf("\n\tMUL R0, R1");
            break;
        case '/':
            printf("\n\tDIV R0, R1");
            break;
        }

        printf("\n\tMOV %c, R0", destReg);
    }
}




FIRST AND FOLLOW
----------------
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>

#define MAX_PROD 10
#define MAX_LEN 10

int n, m = 0, loopflag, first_epsilon = 0, follow_epsilon = 0;
char a[MAX_PROD][MAX_LEN], f[MAX_LEN];

void follow(char c);
void first(char c);

void printSet(const char* setType, char c) {
    int i;
    printf("%s(%c) = {", setType, c);
    for (i = 0; i < m; i++)
        printf("%c ", f[i]);
    printf("}\n");
}

void findFirst(char c) {
    int k, l;
    if (!isupper(c))
        f[m++] = c;
    for (k = 0; k < n; k++) {
        l = 3;
        if (a[k][0] == c) {
            if (a[k][2] == '$')
                follow(a[k][0]);
            else if (islower(a[k][2]) || a[k][2] == '#' || isdigit(a[k][2]) || ispunct(a[k][2]))
                f[m++] = a[k][2];
            else {
                loopflag = 1;
                findFirst(a[k][2]);
                while (first_epsilon == 1) {
                    first_epsilon = 0;
                    findFirst(a[k][l]);
                    l++;
                }
            }
        }
    }
}

void first(char c) {
    int l;
    findFirst(c);
    printSet("FIRST", c);
    strcpy(f, " ");
    m = 0;
}

void findFollow(char c) {
    int l, k, z;
    if (a[0][0] == c)
        f[m++] = '$';
    for (int i = 0; i < n; i++) {
        for (int j = 2; j < strlen(a[i]); j++) {
            z = j;
            if (a[i][z] == c) {
                if (a[i][z + 1] == '\0' && c != a[i][0])
                    findFollow(a[i][0]);
                while (a[i][z + 1] != '\0') {
                    loopflag = 0;
                    findFirst(a[i][z + 1]);
                    follow_epsilon = 0;
                    for (l = 0; l < m; l++) {
                        if (f[l] == '#') {
                            for (k = l; k < m - 1; k++)
                                f[k] = f[k + 1];
                            follow_epsilon = 1;
                            m--;
                            z++;
                            break;
                        }
                    }
                    if (follow_epsilon == 0)
                        break;
                }
                if (a[i][z + 1] == '\0' && follow_epsilon == 1) {
                    findFollow(a[i][0]);
                    follow_epsilon = 0;
                }
            }
        }
    }
}

void follow(char c) {
    findFollow(c);
    printSet("FOLLOW", c);
    strcpy(f, " ");
    m = 0;
}

int main() {
    int i, z;
    char c, ch;
    printf("\n\t--- FIRST AND FOLLOW ---\n");
    printf("\nEnter the no of productions : ");
    scanf("%d", &n);
    printf("\n(NOTE: Epsilon = '#' when giving inputs)\n(NOTE: Use the format A=Ab\n\t\t      A=c)\n");
    printf("\nEnter the productions below: \n");

    for (i = 0; i < n; i++)
        scanf("%s%c", a[i], &ch);

    do {
        m = 0;
        printf("\nEnter a variable whose first & follow is to be found:");
        scanf(" %c", &c);

        loopflag = 0;
        first(c);
        follow(c);
        printf("\nWant to continue or not(1/0) ? ");
        scanf("%d%c", &z, &ch);
    } while (z == 1);

    return 0;
}




SHIFT REDUCE PARSER
-------------------
#include <stdio.h>
#include <string.h>

struct ProductionRule
{
    char left[10];
    char right[10];
};

int main()
{
    char input[20], stack[50], temp[50], ch[2], *token1, *token2, *substring;
    int i, j, stack_length, substring_length, stack_top, rule_count = 0;
    struct ProductionRule rules[10];
    stack[0] = '\0';
    int k;

    printf("\nEnter the number of production rules: ");
    scanf("%d", &rule_count);

    printf("\nEnter the production rules (in the form 'left->right'): \n");
    for (i = 0; i < rule_count; i++)
    {
        scanf("%s", temp);
        token1 = strtok(temp, "->");
        token2 = strtok(NULL, "->");
        strcpy(rules[i].left, token1);
        strcpy(rules[i].right, token2);
    }

    printf("\nEnter the input string: ");
    scanf("%s", input);

    i = 0;
    while (1)
    {
        if (i < strlen(input))
        {
            ch[0] = input[i];
            ch[1] = '\0';
            i++;
            strcat(stack, ch);
            printf("%s\t", stack);
            for (k = i; k < strlen(input); k++)
            {
                printf("%c", input[k]);
            }
            printf("\tShift %s\n", ch);
        }

        for (j = 0; j < rule_count; j++)
        {
            substring = strstr(stack, rules[j].right);
            if (substring != NULL)
            {
                stack_length = strlen(stack);
                substring_length = strlen(substring);
                stack_top = stack_length - substring_length;
                stack[stack_top] = '\0';
                strcat(stack, rules[j].left);
                printf("%s\t", stack);
                for (k = i; k < strlen(input); k++)
                {
                    printf("%c", input[k]);
                }
                printf("\tReduce %s->%s\n", rules[j].left, rules[j].right);
                j = -1;
            }
        }

        if (strcmp(stack, rules[0].left) == 0 && i == strlen(input))
        {
            printf("\nAccepted");
            break;
        }

        if (i == strlen(input))
        {
            printf("\nNot Accepted");
            break;
        }
    }

    return 0;
}